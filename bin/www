#!/usr/bin/env node
const path = require('path'),
      process = require('process'),
      fs = require('fs');

process.env.NODE_PATH =  path.join(__dirname, '../');

const config = require(process.env.NODE_PATH + '/config');
process.env.NODE_ENV = config.environment;

var app = require('../app');
var debug = require('debug')('veerless:server');
var http = require('http');
var https = require('https');
var port;
var server;

if (app.get('env') === 'development') {
  port = '80';
  app.set('port', port);
  server = http.createServer(app);
} 
else if (app.get('env') === 'production') {
  port = '443';
  app.set('port', port);
  var options = {
    key: fs.readFileSync('/etc/letsencrypt/live/veerless.josephkirwin.com/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/veerless.josephkirwin.com/cert.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/veerless.josephkirwin.com/chain.pem')
  };
  server = http.createServer(app);
}
else 
  throw new Error('environment type not defined!');

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
